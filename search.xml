<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>maven配置国内镜像源</title>
    <url>/2021/05/08/Maven%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    <content><![CDATA[<p>Maven仓库默认的镜像源是国外的,在国内访问获取资源很慢,可以配置一下国内的maven镜像源,快速获取资源,自己记录一下…</p>
<span id="more"></span>

<h1 id="打开maven安装目录下的设置文件"><a href="#打开maven安装目录下的设置文件" class="headerlink" title="打开maven安装目录下的设置文件"></a>打开maven安装目录下的设置文件</h1><p>例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\Program Files\Maven3.6.3\conf\setting.xml</span><br></pre></td></tr></table></figure>
<h2 id="localRepository-可定义本地仓库存储路径"><a href="#localRepository-可定义本地仓库存储路径" class="headerlink" title="localRepository 可定义本地仓库存储路径"></a>localRepository 可定义本地仓库存储路径</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;localRepository&gt;D:/Program Files/Maven3.6.3/repo&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure>

<h2 id="maven镜像替换"><a href="#maven镜像替换" class="headerlink" title="maven镜像替换"></a>maven镜像替换</h2><p>搜索到 <code>&lt;mirrors&gt;...</code>,将下面的 xml 替换 原有的 <code>&lt;mirrors&gt;...&lt;/mirrors&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Repository Switchboard<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo2.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>ibiblio<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://mirrors.ibiblio.org/pub/mirrors/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>jboss-public-repository-group<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>JBoss Public Repository Group<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repository.jboss.org/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 中央仓库在中国的镜像 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven.net.cn<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>oneof the central mirrors in china<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.net.cn/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>软件和工具</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>VO,DTO,DO,PO有什么区别</title>
    <url>/2021/05/07/VODTODOPO%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>做程序开发时,在对数据对象映射时,有把对象生成VO,DTO,DO,PO对象,记录一下这些VO,DTO,DO,PO什么意思和区别…</p>
<span id="more"></span>
<h1 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h1><blockquote>
<p>VO（View Object）：视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。</p>
</blockquote>
<blockquote>
<p>DTO（Data Transfer Object）：数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。</p>
</blockquote>
<blockquote>
<p>DO（Domain Object）：领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。</p>
</blockquote>
<blockquote>
<p>PO（Persistent Object）：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。</p>
</blockquote>
<h2 id="模型："><a href="#模型：" class="headerlink" title="模型："></a>模型：</h2><p>   下面以一个时序图建立简单模型来描述上述对象在三层架构应用中的位置</p>
<ul>
<li><p>用户发出请求（可能是填写表单），表单的数据在展示层被匹配为VO。</p>
</li>
<li><p>展示层把VO转换为服务层对应方法所要求的DTO，传送给服务层。</p>
</li>
<li><p>服务层首先根据DTO的数据构造（或重建）一个DO，调用DO的业务方法完成具体业务。</p>
</li>
<li><p>服务层把DO转换为持久层对应的PO（可以使用ORM工具，也可以不用），调用持久层的持久化方法，把PO传递给它，完成持久化操作。</p>
</li>
<li><p>对于一个逆向操作，如读取数据，也是用类似的方式转换和传递，略。</p>
</li>
</ul>
<h1 id="VO与DTO的区别"><a href="#VO与DTO的区别" class="headerlink" title="VO与DTO的区别"></a>VO与DTO的区别</h1><p>   大家可能会有个疑问（在笔者参与的项目中，很多程序员也有相同的疑惑）：既然DTO是展示层与服务层之间传递数据的对象，为什么还需要一个VO呢？对！对于绝大部分的应用场景来说，DTO和VO的属性值基本是一致的，而且他们通常都是POJO，因此没必要多此一举，但不要忘记这是实现层面的思维，对于设计层面来说，概念上还是应该存在VO和DTO，因为两者有着本质的区别，DTO代表服务层需要接收的数据和返回的数据，而VO代表展示层需要显示的数据。</p>
<p>   用一个例子来说明可能会比较容易理解：例如服务层有一个getUser的方法返回一个系统用户，其中有一个属性是gender(性别)，对于服务层来说，它只从语义上定义：1-男性，2-女性，0-未指定，而对于展示层来说，它可能需要用“帅哥”代表男性，用“美女”代表女性，用“秘密”代表未指定。说到这里，可能你还会反驳，在服务层直接就返回“帅哥美女”不就行了吗？对于大部分应用来说，这不是问题，但设想一下，如果需求允许客户可以定制风格，而不同风格对于“性别”的表现方式不一样，又或者这个服务同时供多个客户端使用（不同门户），而不同的客户端对于表现层的要求有所不同，那么，问题就来了。再者，回到设计层面上分析，从职责单一原则来看，服务层只负责业务，与具体的表现形式无关，因此，它返回的DTO，不应该出现与表现形式的耦合。</p>
<p>   理论归理论，这到底还是分析设计层面的思维，是否在实现层面必须这样做呢？一刀切的做法往往会得不偿失，下面我马上会分析应用中如何做出正确的选择。</p>
<h1 id="VO与DTO的应用"><a href="#VO与DTO的应用" class="headerlink" title="VO与DTO的应用"></a>VO与DTO的应用</h1><p>   上面只是用了一个简单的例子来说明VO与DTO在概念上的区别，本节将会告诉你如何在应用中做出正确的选择。</p>
<p>   在以下才场景中，我们可以考虑把VO与DTO二合为一（注意：是实现层面）：</p>
<ul>
<li><p>当需求非常清晰稳定，而且客户端很明确只有一个的时候，没有必要把VO和DTO区分开来，这时候VO可以退隐，用一个DTO即可，为什么是VO退隐而不是DTO？回到设计层面，服务层的职责依然不应该与展示层耦合，所以，对于前面的例子，你很容易理解，DTO对于“性别”来说，依然不能用“帅哥美女”，这个转换应该依赖于页面的脚本（如JavaScript）或其他机制（JSTL、EL、CSS）</p>
</li>
<li><p>即使客户端可以进行定制，或者存在多个不同的客户端，如果客户端能够用某种技术（脚本或其他机制）实现转换，同样可以让VO退隐</p>
</li>
</ul>
<p>以下场景需要优先考虑VO、DTO并存：</p>
<ul>
<li><p>上述场景的反面场景</p>
</li>
<li><p>因为某种技术原因，比如某个框架（如Flex）提供自动把POJO转换为UI中某些Field时，可以考虑在实现层面定义出VO，这个权衡完全取决于使用框架的自动转换能力带来的开发和维护效率提升与设计多一个VO所多做的事情带来的开发和维护效率的下降之间的比对。</p>
</li>
<li><p>如果页面出现一个“大视图”，而组成这个大视图的所有数据需要调用多个服务，返回多个DTO来组装（当然，这同样可以通过服务层提供一次性返回一个大视图的DTO来取代，但在服务层提供一个这样的方法是否合适，需要在设计层面进行权衡）。</p>
</li>
</ul>
<h1 id="DTO与DO的区别"><a href="#DTO与DO的区别" class="headerlink" title="DTO与DO的区别"></a>DTO与DO的区别</h1><p>   首先是概念上的区别，DTO是展示层和服务层之间的数据传输对象（可以认为是两者之间的协议），而DO是对现实世界各种业务角色的抽象，这就引出了两者在数据上的区别，例如UserInfo和User（对于DTO和DO的命名规则，请参见笔者前面的一篇博文），对于一个getUser方法来说，本质上它永远不应该返回用户的密码，因此UserInfo至少比User少一个password的数据。而在领域驱动设计中，正如第一篇系列文章所说，DO不是简单的POJO，它具有领域业务逻辑。</p>
<h1 id="DTO与DO的应用"><a href="#DTO与DO的应用" class="headerlink" title="DTO与DO的应用"></a>DTO与DO的应用</h1><p>   从上一节的例子中，细心的读者可能会发现问题：既然getUser方法返回的UserInfo不应该包含password，那么就不应该存在password这个属性定义，但如果同时有一个createUser的方法，传入的UserInfo需要包含用户的password，怎么办？在设计层面，展示层向服务层传递的DTO与服务层返回给展示层的DTO在概念上是不同的，但在实现层面，我们通常很少会这样做（定义两个UserInfo，甚至更多），因为这样做并不见得很明智，我们完全可以设计一个完全兼容的DTO，在服务层接收数据的时候，不该由展示层设置的属性（如订单的总价应该由其单价、数量、折扣等决定），无论展示层是否设置，服务层都一概忽略，而在服务层返回数据时，不该返回的数据（如用户密码），就不设置对应的属性。</p>
<p>   对于DO来说，还有一点需要说明：为什么不在服务层中直接返回DO呢？这样可以省去DTO的编码和转换工作，原因如下：</p>
<ul>
<li><p> 两者在本质上的区别可能导致彼此并不一一对应，一个DTO可能对应多个DO，反之亦然，甚至两者存在多对多的关系。</p>
</li>
<li><p>DO具有一些不应该让展示层知道的数据</p>
</li>
<li><p>DO具有业务方法，如果直接把DO传递给展示层，展示层的代码就可以绕过服务层直接调用它不应该访问的操作，对于基于AOP拦截服务层来进行访问控制的机制来说，这问题尤为突出，而在展示层调用DO的业务方法也会因为事务的问题，让事务难以控制。</p>
</li>
<li><p>对于某些ORM框架（如Hibernate）来说，通常会使用“延迟加载”技术，如果直接把DO暴露给展示层，对于大部分情况，展示层不在事务范围之内（Open session in view在大部分情况下不是一种值得推崇的设计），如果其尝试在Session关闭的情况下获取一个未加载的关联对象，会出现运行时异常（对于Hibernate来说，就是LazyInitiliaztionException）。</p>
</li>
<li><p>从设计层面来说，展示层依赖于服务层，服务层依赖于领域层，如果把DO暴露出去，就会导致展示层直接依赖于领域层，这虽然依然是单向依赖，但这种跨层依赖会导致不必要的耦合。</p>
</li>
</ul>
<p>对于DTO来说，也有一点必须进行说明，就是DTO应该是一个“扁平的二维对象”，举个例子来说明：如果User会关联若干个其他实体（例如Address、Account、Region等），那么getUser()返回的UserInfo，是否就需要把其关联的对象的DTO都一并返回呢？如果这样的话，必然导致数据传输量的大增，对于分布式应用来说，由于涉及数据在网络上的传输、序列化和反序列化，这种设计更不可接受。如果getUser除了要返回User的基本信息外，还需要返回一个AccountId、AccountName、RegionId、RegionName，那么，请把这些属性定义到UserInfo中，把一个“立体”的对象树“压扁”成一个“扁平的二维对象”，笔者目前参与的项目是一个分布式系统，该系统不管三七二十一，把一个对象的所有关联对象都转换为相同结构的DTO对象树并返回，导致性能非常的慢。</p>
<h1 id="DO与PO的区别"><a href="#DO与PO的区别" class="headerlink" title="DO与PO的区别"></a>DO与PO的区别</h1><p>   DO和PO在绝大部分情况下是一一对应的，PO是只含有get/set方法的POJO，但某些场景还是能反映出两者在概念上存在本质的区别：</p>
<ul>
<li><p>DO在某些场景下不需要进行显式的持久化，例如利用策略模式设计的商品折扣策略，会衍生出折扣策略的接口和不同折扣策略实现类，这些折扣策略实现类可以算是DO，但它们只驻留在静态内存，不需要持久化到持久层，因此，这类DO是不存在对应的PO的。</p>
</li>
<li><p>同样的道理，某些场景下，PO也没有对应的DO，例如老师Teacher和学生Student存在多对多的关系，在关系数据库中，这种关系需要表现为一个中间表，也就对应有一个TeacherAndStudentPO的PO，但这个PO在业务领域没有任何现实的意义，它完全不能与任何DO对应上。这里要特别声明，并不是所有多对多关系都没有业务含义，这跟具体业务场景有关，例如：两个PO之间的关系会影响具体业务，并且这种关系存在多种类型，那么这种多对多关系也应该表现为一个DO，又如：“角色”与“资源”之间存在多对多关系，而这种关系很明显会表现为一个DO——“权限”。</p>
</li>
<li><p>某些情况下，为了某种持久化策略或者性能的考虑，一个PO可能对应多个DO，反之亦然。例如客户Customer有其联系信息Contacts，这里是两个一对一关系的DO，但可能出于性能的考虑（极端情况，权作举例），为了减少数据库的连接查询操作，把Customer和Contacts两个DO数据合并到一张数据表中。反过来，如果一本图书Book，有一个属性是封面cover，但该属性是一副图片的二进制数据，而某些查询操作不希望把cover一并加载，从而减轻磁盘IO开销，同时假设ORM框架不支持属性级别的延迟加载，那么就需要考虑把cover独立到一张数据表中去，这样就形成一个DO对应对个PO的情况。</p>
</li>
<li><p>PO的某些属性值对于DO没有任何意义，这些属性值可能是为了解决某些持久化策略而存在的数据，例如为了实现“乐观锁”，PO存在一个version的属性，这个version对于DO来说是没有任何业务意义的，它不应该在DO中存在。同理，DO中也可能存在不需要持久化的属性。</p>
</li>
</ul>
<h1 id="DO与PO的应用"><a href="#DO与PO的应用" class="headerlink" title="DO与PO的应用"></a>DO与PO的应用</h1><p>   由于ORM框架的功能非常强大而大行其道，而且JavaEE也推出了JPA规范，现在的业务应用开发，基本上不需要区分DO与PO，PO完全可以通过JPA，Hibernate Annotations/hbm隐藏在DO之中。虽然如此，但有些问题我们还必须注意：</p>
<ul>
<li><p>对于DO中不需要持久化的属性，需要通过ORM显式的声明，如：在JPA中，可以利用@Transient声明。</p>
</li>
<li><p>对于PO中为了某种持久化策略而存在的属性，例如version，由于DO、PO合并了，必须在DO中声明，但由于这个属性对DO是没有任何业务意义的，需要让该属性对外隐藏起来，最常见的做法是把该属性的get/set方法私有化，甚至不提供get/set方法，但对于Hibernate来说，这需要特别注意，由于Hibernate从数据库读取数据转换为DO时，是利用反射机制先调用DO的空参数构造函数构造DO实例，然后再利用JavaBean的规范反射出set方法来为每个属性设值，如果不显式声明set方法，或把set方法设置为private，都会导致Hibernate无法初始化DO，从而出现运行时异常，可行的做法是把属性的set方法设置为protected。</p>
</li>
<li><p>对于一个DO对应多个PO，或者一个PO对应多个DO的场景，以及属性级别的延迟加载，Hibernate都提供了很好的支持，请参考Hibnate的相关资料。</p>
</li>
</ul>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><blockquote>
<p>参考:<a href="https://www.cnblogs.com/zxf330301/p/6534643.html" title="链接title">https://www.cnblogs.com/zxf330301/p/6534643.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>docker常用指令</title>
    <url>/2021/05/07/docker%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>docker常用的命令,包括docker启动命令,docker镜像命令,docker容器命令等…</p>
<span id="more"></span>
<h1 id="docker命令"><a href="#docker命令" class="headerlink" title="docker命令"></a>docker命令</h1><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker --help</span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p><code>sudo /etc/init.d/docker start</code></p>
<h1 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h1><h2 id="镜像帮助"><a href="#镜像帮助" class="headerlink" title="镜像帮助"></a>镜像帮助</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images --help</span><br></pre></td></tr></table></figure>

<h2 id="查询镜像"><a href="#查询镜像" class="headerlink" title="查询镜像"></a>查询镜像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search 镜像名</span><br></pre></td></tr></table></figure>

<h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull 镜像名</span><br></pre></td></tr></table></figure>
<h2 id="查看已下载镜像"><a href="#查看已下载镜像" class="headerlink" title="查看已下载镜像"></a>查看已下载镜像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi 镜像名</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h1><h2 id="容器帮助"><a href="#容器帮助" class="headerlink" title="容器帮助"></a>容器帮助</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps --help</span><br></pre></td></tr></table></figure>

<h2 id="从镜像生成容器"><a href="#从镜像生成容器" class="headerlink" title="从镜像生成容器"></a>从镜像生成容器</h2><h3 id="交互式界面生成"><a href="#交互式界面生成" class="headerlink" title="交互式界面生成"></a>交互式界面生成</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it [--name 别名] 镜像名</span><br></pre></td></tr></table></figure>
<p>配合 <code>Ctrl+P+Q</code>不关闭容器退出界面使用。</p>
<h3 id="守护式后台生成"><a href="#守护式后台生成" class="headerlink" title="守护式后台生成"></a>守护式后台生成</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d [--name 别名] 镜像名  /bin/sh -c &quot;while true;do echo hello liyaocool!;sleep 2;done&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>/bin/sh -c “…” 意为 让后台一直每两秒打印日志，防止docker的后台机制判定休眠自动停止容器。</p>
<h2 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps [options]</span><br></pre></td></tr></table></figure>
<p>[options]:</p>
<ul>
<li>-a 查看全部；</li>
<li>-q 只查看id；</li>
</ul>
<h2 id="容器的退出"><a href="#容器的退出" class="headerlink" title="容器的退出"></a>容器的退出</h2><ul>
<li>停止容器并退出交互界面<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure></li>
<li>不停止容器并退出交互界面(快捷键)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl + P + Q</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="容器的再进入"><a href="#容器的再进入" class="headerlink" title="容器的再进入"></a>容器的再进入</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器ID /bin/bash</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="日志命令"><a href="#日志命令" class="headerlink" title="日志命令"></a>日志命令</h1><h2 id="日志帮助"><a href="#日志帮助" class="headerlink" title="日志帮助"></a>日志帮助</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs --help</span><br></pre></td></tr></table></figure>
<h2 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs [options] 容器ID</span><br></pre></td></tr></table></figure>
<p>options:</p>
<ul>
<li>-t 显示时间</li>
<li>-f 动态跟随更新</li>
<li>–tail n 显示最新n条日志</li>
</ul>
<h1 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h1><h2 id="容器内文件-复制-到宿主机"><a href="#容器内文件-复制-到宿主机" class="headerlink" title="容器内文件 复制 到宿主机"></a>容器内文件 复制 到宿主机</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp 容器ID:/home/abc /home</span><br></pre></td></tr></table></figure>
<p>将容器的<code>/home/abc</code> 文件复制到宿主机  <code>/home</code></p>
<h2 id="镜像提交"><a href="#镜像提交" class="headerlink" title="镜像提交"></a>镜像提交</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者名&quot; 容器ID 要创建的镜像名:[标签] </span><br></pre></td></tr></table></figure>

<h2 id="镜像启动-停止"><a href="#镜像启动-停止" class="headerlink" title="镜像启动/停止"></a>镜像启动/停止</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start 容器ID/别名</span><br><span class="line">docker stop 容器ID/别名</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>软件和工具</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 常用指令</title>
    <url>/2021/01/06/hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>hexo常用的指令,包括创建文章,生成页面,发布.</p>
<span id="more"></span>
<h2 id="文章生成"><a href="#文章生成" class="headerlink" title="文章生成"></a>文章生成</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;新文章&quot;</span><br></pre></td></tr></table></figure>
<p>然后就可以编辑 <code>source/_posts/新文章.md</code></p>
<h2 id="生成页面"><a href="#生成页面" class="headerlink" title="生成页面"></a>生成页面</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown常用语法</title>
    <url>/2021/04/07/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>Markdown是一种轻量级标记语言,作为程序员,markdown标记语言可快速记录学习笔记,下面记录一下markdown的常用语法,让我们的学习笔记更快捷方便,<br>推荐微软的Visual Studio Code(简称vs code) 一边编辑,一边预览…</p>
<span id="more"></span>
<h1 id="markdown标题📌"><a href="#markdown标题📌" class="headerlink" title="markdown标题📌"></a>markdown标题📌</h1><pre><code># 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
</code></pre>
<h1 id="markdown字体🀄"><a href="#markdown字体🀄" class="headerlink" title="markdown字体🀄"></a>markdown字体🀄</h1><p><strong>加粗:</strong></p>
<pre><code>**加粗**
</code></pre>
<p><em>斜体:</em></p>
<pre><code>*斜体*
</code></pre>
<p><em><strong>斜体加粗:</strong></em></p>
<pre><code>***斜体加粗***
</code></pre>
<p><del>删除线</del></p>
<pre><code>~~删除线~~
</code></pre>
<h1 id="markdown层级树🌴"><a href="#markdown层级树🌴" class="headerlink" title="markdown层级树🌴"></a>markdown层级树🌴</h1><blockquote>
<p>一层</p>
<blockquote>
<p>二层</p>
<blockquote>
<p>三层</p>
</blockquote>
</blockquote>
</blockquote>
<pre><code>&gt; 一层
&gt;&gt; 二层
&gt;&gt;&gt; 三层
</code></pre>
<h1 id="markdown分割线📏"><a href="#markdown分割线📏" class="headerlink" title="markdown分割线📏"></a>markdown分割线📏</h1><pre><code>---- 三个或以上的 - 
**** 三个或以上的 *
</code></pre>
<hr>
<hr>
<h1 id="markdown图片🎨"><a href="#markdown图片🎨" class="headerlink" title="markdown图片🎨"></a>markdown图片🎨</h1><pre><code>![图片alt](图片地址 &quot;图片title&quot;)
</code></pre>
<p>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加。</p>
<p>例如：</p>
<pre><code>![img_alt](http://abc.com/img.jgp &quot;图片标题&quot;)
</code></pre>
<p><img src="https://himg.bdimg.com/sys/portrait/item/pp.1.ac40379c.MvMnb-wAyGxDHzES4FXw2A.jpg?1572451329" alt="img_alt" title="秋千架"></p>
<h1 id="markdown超链接⚡"><a href="#markdown超链接⚡" class="headerlink" title="markdown超链接⚡"></a>markdown超链接⚡</h1><pre><code>[超链接名](链接地址 &quot;链接title&quot;)
</code></pre>
<p>链接title可加可不加</p>
<p>例如：</p>
<p><a href="https://github.com/">gitHub</a></p>
<h1 id="markdown列表📋"><a href="#markdown列表📋" class="headerlink" title="markdown列表📋"></a>markdown列表📋</h1><h4 id="无序列表：前置-注意有空格"><a href="#无序列表：前置-注意有空格" class="headerlink" title="无序列表：前置- /+ /*  (注意有空格)"></a>无序列表：前置- /+ /*  (注意有空格)</h4><pre><code>- 无序列表
+ 无序列表
* 无序列表
</code></pre>
<h4 id="markdown有序列表"><a href="#markdown有序列表" class="headerlink" title="markdown有序列表"></a>markdown有序列表</h4><p>前方加数字和点1. /2. /3. / … (注意有空格)</p>
<pre><code>1. 有序列表1
2. 有序列表2
3. 有序列表3
</code></pre>
<ol>
<li>有序列表1</li>
<li>有序列表2</li>
<li>有序列表3</li>
</ol>
<h4 id="markdown列表嵌套"><a href="#markdown列表嵌套" class="headerlink" title="markdown列表嵌套"></a>markdown列表嵌套</h4><p>层级之间 3个空格</p>
<blockquote>
<p>无序列表</p>
</blockquote>
<ol>
<li>有序</li>
<li>有序</li>
<li>有序</li>
</ol>
<blockquote>
<p>有序列表</p>
</blockquote>
<ul>
<li>无序</li>
<li>无序</li>
<li>无序</li>
</ul>
<h1 id="markdown表格📊"><a href="#markdown表格📊" class="headerlink" title="markdown表格📊"></a>markdown表格📊</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表头| 表头|表头</span><br><span class="line">--- |:---:|---:</span><br><span class="line">内容1|内容2|内容3</span><br><span class="line">内容1.1|内容2.1|内容3.1</span><br></pre></td></tr></table></figure>

<p>第二行分割表头和内容。</p>
<ul>
<li>有一个就行，为了对齐，多加了几个<br>文字默认居左</li>
<li>两边加：表示文字居中</li>
<li>右边加：表示文字居右<br>注：原生的语法两边都要用 | 包起来。此处省略</li>
</ul>
<table>
<thead>
<tr>
<th>表头</th>
<th align="center">表头</th>
<th align="right">表头</th>
</tr>
</thead>
<tbody><tr>
<td>内容1</td>
<td align="center">内容2</td>
<td align="right">内容3</td>
</tr>
<tr>
<td>内容1.1</td>
<td align="center">内容2.1</td>
<td align="right">内容3.1</td>
</tr>
</tbody></table>
<h1 id="markdown代码🙈"><a href="#markdown代码🙈" class="headerlink" title="markdown代码🙈"></a>markdown代码🙈</h1><ul>
<li>单行代码</li>
</ul>
<pre><code>`code`
</code></pre>
<ul>
<li>多行代码块 </li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">code start</span><br><span class="line"></span><br><span class="line">code end</span><br></pre></td></tr></table></figure>
<pre><code>
</code></pre>
]]></content>
      <categories>
        <category>软件和工具</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库存储过程和存储函数</title>
    <url>/2021/03/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%AD%98%E5%82%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>有时候会忘记数据库的存储函数和存储过程,这里记录一下创建删除存储过程,创建删除存储函数SQL语法…</p>
<span id="more"></span>
<h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><h3 id="输入参数型的创建"><a href="#输入参数型的创建" class="headerlink" title="输入参数型的创建"></a>输入参数型的创建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line">CREATE PROCEDURE GetAllUsers(IN userId BIGINT)</span><br><span class="line">BEGIN</span><br><span class="line">    SELECT * FROM t_user WHERE ID = userId;</span><br><span class="line">END //</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>DELIMITER</code> 是开启用’//‘替换sql结束符 <code>;</code>的。<code>END</code> 之前<code>//</code>的才是 创建存储过程的语句整体。<br>语句结束后，要及时把<code>//</code>替换回来 <code>;</code>.</li>
<li>IN 输入参数</li>
</ul>
<h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CALL GetAllUsers(17);</span><br></pre></td></tr></table></figure>

<h3 id="输出参数型的创建"><a href="#输出参数型的创建" class="headerlink" title="输出参数型的创建"></a>输出参数型的创建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line">CREATE PROCEDURE GetUsersCount(OUT count bigint)</span><br><span class="line">BEGIN</span><br><span class="line">    SELECT COUNT(*) INTO count FROM t_user;</span><br><span class="line">    SELECT @count AS &#x27;MYCOUNT&#x27;;</span><br><span class="line">END //</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="调用-1"><a href="#调用-1" class="headerlink" title="调用"></a>调用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CALL GetUsersCount(@count);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="存储过程的其他命令"><a href="#存储过程的其他命令" class="headerlink" title="存储过程的其他命令"></a>存储过程的其他命令</h2><ul>
<li><p>显示存储过程状态详情</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW PROCEDURE STATUS;</span><br></pre></td></tr></table></figure></li>
<li><p>显示存储过程的创建详情</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW CREATE PROCEDURE GetAllUsers;</span><br></pre></td></tr></table></figure></li>
<li><p>删除存储过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP PROCEDURE IF EXISTS GetAllUsers;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h1><h2 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line">CREATE FUNCTION GetAllUsers(userId VARCHAR(20))</span><br><span class="line">    RETURNS VARCHAR(20)</span><br><span class="line">    DETERMINISTIC</span><br><span class="line">BEGIN</span><br><span class="line">    RETURN (SELECT name FROM t_user WHERE ID = userId);</span><br><span class="line">end $$</span><br></pre></td></tr></table></figure>
<ul>
<li>在<code>CREATE FUNCTION</code>子句之后指定存储函数的名称。</li>
<li>列出括号为内存储函数的所有参数。默认情况下，所有参数均为<code>IN</code>参数。不能为参数指定<code>IN</code>，<code>OUT</code>或<code>INOUT</code>修饰符。</li>
<li>必须在<code>RETURNS</code>语句中指定返回值的数据类型。它可以是任何有效的<code>MySQL</code>数据类型。</li>
<li>对于相同的输入参数，如果存储的函数返回相同的结果，这样则被认为是确定性的，否则存储的函数不是确定性的。必须决定一个存储函数是否是确定性的<code>[NOT] DETERMINISTIC</code>。如果您声明不正确，则存储的函数可能会产生意想不到的结果，或者不使用可用的优化，从而降低性能。</li>
<li>将代码写入存储函数的主体中。 它可以是单个语句或复合语句。 在主体部分中，必须至少指定一个<code>RETURN</code>语句。<code>RETURN</code>语句用于返回一个值给调用者。 每当到达<code>RETURN</code>语句时，存储的函数的执行将立即终止。</li>
</ul>
<h2 id="调用存储函数"><a href="#调用存储函数" class="headerlink" title="调用存储函数"></a>调用存储函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT GetAllUsers(17);</span><br></pre></td></tr></table></figure>

<h2 id="存储函数的其他命令"><a href="#存储函数的其他命令" class="headerlink" title="存储函数的其他命令"></a>存储函数的其他命令</h2><ul>
<li>删除函数 <code>DROP FUNCTION GetAllUsers;</code></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库触发器</title>
    <url>/2021/02/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%A6%E5%8F%91%E5%99%A8/</url>
    <content><![CDATA[<p>所谓触发器,就是在指定表上，(insert(插入)、update(跟新)、delete(删除))事件动作,触发（After(之后)时机,Before(之前)），执行指定的一群或一个sql语句。</p>
<span id="more"></span>

<h2 id="创建触发器语法"><a href="#创建触发器语法" class="headerlink" title="创建触发器语法"></a>创建触发器语法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW </span><br><span class="line">trigger_stmt</span><br></pre></td></tr></table></figure>
<ul>
<li><code>trigger_name</code>: 触发器名称，用户自行指定</li>
<li><code>trigger_time</code>: 触发时机，取值<code>BEFORE</code>（之前）、<code>AFTER</code>（之后）</li>
<li><code>trigger_event</code>: 触发事件，<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>。（插入、更新、删除）</li>
<li><code>tbl_name</code>: 需要创建触发器的表名</li>
<li><code>trigger_stmt</code>: 触发程序体，可以是一条SQL语句或是BEGIN和END包含的索条语句</li>
</ul>
<p>由上方触发时机(<code>BEFORE</code>,<code>AFTER</code>) 和触发事件(<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>),并且一张表上不能创建两个相同类型的触发器，因此一张表上面最多能创建 <code>6</code> 种类型的触发器：</p>
<ul>
<li><code>BEFORE INSERT</code>、<code>BEFORE UPDATE</code>、<code>BEFORE DELETE</code></li>
<li><code>AFTER INSERT</code>、<code>AFTER UODATE</code>、<code>AFTER DELETE</code></li>
</ul>
<h3 id="创建触发器实例"><a href="#创建触发器实例" class="headerlink" title="创建触发器实例"></a>创建触发器实例</h3><p>目的：对新插入数据的名字统一改为 二狗子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line">CREATE TRIGGER tg_rename</span><br><span class="line">    BEFORE INSERT</span><br><span class="line">    ON t_user</span><br><span class="line">    FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">    SET NEW.name = &#x27;二狗子&#x27;;</span><br><span class="line">end $$</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"># 触发器执行插入</span><br><span class="line">INSERT INTO t_user (name, gender, age)</span><br><span class="line">VALUES (&#x27;二哈&#x27;, 1, 15);</span><br></pre></td></tr></table></figure>

<p>上方有个 <code>NEW</code>/<code>OLD</code>,表示新增的记录或删除的记录。</p>
<h3 id="触发器的其他命令"><a href="#触发器的其他命令" class="headerlink" title="触发器的其他命令"></a>触发器的其他命令</h3><ul>
<li>显示触发器：<code>SHOW TRIGGER</code></li>
<li>删除触发器：<code>DROP TRIGGER IF EXISTS tg_name</code></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
</search>
